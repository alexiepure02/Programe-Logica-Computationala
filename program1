import string


def verificare_sintaxa(f):

    f.append('0')
    propozitii = list(string.ascii_uppercase)
    conectori = ['∧', '∨', '⇒', '⇔']

    este = False
    index = 0
    nr_para_d = 0
    nr_para_i = 0
    nr_cone = 0
    gasit2paranteze = False
    eroare = 0

    for space in f:
        if space == ' ':
            f.remove(space)

    caz = -1
    if f[0] == '(':
        nr_para_d += 1
        caz = 1
    elif f[0] in propozitii:
        caz = 2

    def verif(case, i, nr_par_d, nr_par_i, nr_con, par2, error):

        if case == -1:
            print('')
            if error == 1:
                print("Dupa paranteza de pe pozitia", i - 1, "trebuie sa urmeze paranteza deschisa, litera sau '¬'")
            elif error == 2:
                print("Dupa litera de pe pozitia", i - 1, "trebuie sa urmeze conector (diferit de '¬') sau paranteza inchisa")
            elif error == 3:
                print("Dupa '¬' de pe pozitia", i - 1, "trebuie sa urmeze paranteza deschisa sau litera")
            elif error == 4:
                print("Dupa conectorul de pe pozitia", i - 1, "trebuie sa urmeze paranteza deschisa sau litera")
            elif error == 5:
                print("Dupa paranteza inchisa de pozitia", i - 1, "trebuie sa urmeze conector (diferit de '¬') sau paranteza inchisa")
            elif error == 6:
                print("Numarul de paranteze deschide nu este egal cu cel al parantezelor inchise")
            elif error == 7:
                print("Numarul perechilor de paranteze nu este egal cu cel al conectorilor")
            elif error == 8:
                print("Pe pozitia", i, "nu este permisa notatia de tip (", f[i], ")")
            elif error == 9:
                print("Pe pozitia ", i, " dupa notatia (¬", f[i], " trebuie sa urmeze paranteza inchisa")
            elif error == 10:
                print("Nu este permisa notatia de tip (( ... ))")
            print('Nu este formula propozitionala')

        elif case == 0:

            # print("paranteze=", nr_par_d, nr_par_i, "conectori=", nr_con)

            if nr_par_d + nr_par_i == 2 * nr_con:
                if nr_par_d == nr_par_i:
                    print("Este formula propozitionala")
                else:
                    verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 6)
            else:
                verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 7)

        i += 1

        # print("elem=", f[i - 1], "index=", i - 1, "case=", case)

        if case == 1:
            if f[i - 2] != '(':                                                     # daca gasim o paranteza fara alti vecini paranteze par2 = false
                par2 = False
            if f[i] == '(':                                                         # daca gasim 2 paranteze deschise una langa alta par2 = true
                par2 = True
                nr_par_d += 1
                verif(1, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            elif f[i] in propozitii:
                if f[i + 1] == ')':
                    verif(2, i, nr_par_d, nr_par_i, nr_con, par2, 0)                # expectie - nu e permis (A)
                else:
                    verif(2, i, nr_par_d, nr_par_i, nr_con, par2, 8)
            elif f[i] == '¬':
                nr_con += 1
                verif(3, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            else:
                verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 1)

        elif case == 2:
            if f[i] in conectori:
                nr_con += 1
                verif(4, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            elif f[i] == ')':
                nr_par_i += 1
                verif(5, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            elif f[i] == '0':
                verif(0, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            else:
                verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 2)

        elif case == 3:
            if f[i] == '(':
                nr_par_d += 1
                verif(1, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            elif f[i] in propozitii:
                if f[i + 1] == ')':
                    verif(2, i, nr_par_d, nr_par_i, nr_con, par2, 0)                # exceptie - cand avem secventa '¬A',
                else:                                                               # urmatorul element trebuie sa fie ')'
                    verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 9)
            else:
                verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 3)

        elif case == 4:
            if f[i] == '(':
                nr_par_d += 1
                verif(1, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            elif f[i] in propozitii:
                verif(2, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            else:
                verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 4)

        elif case == 5:
            if f[i] != ')':                                                         # daca am gasit o paranteza inchisa fara
                par2 = False                                                        # vecini paranteze inchise par2 = False
            if f[i] in conectori:
                nr_con += 1
                verif(4, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            elif f[i] == ')':
                nr_par_i += 1
                if par2:                                                            # exceptie - suntem intr-un caz de genul: ((...))
                    verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 10)              # ceea ce e incorect
                else:
                    verif(5, i, nr_par_d, nr_par_i, nr_con, par2, 0)
            elif f[i] == '0':
                verif(0, i, nr_par_d, nr_par_i, nr_con, 0,  0)
            else:
                verif(-1, i, nr_par_d, nr_par_i, nr_con, par2, 5)

    verif(caz, index, nr_para_d, nr_para_i, nr_cone, gasit2paranteze, eroare)

    if este:
        return True
    else:
        return False


def constructie_arbore(f):

    propozitii = list(string.ascii_uppercase)
    conectori = ['∧', '∨', '⇒', '⇔']

    f1 = []

    for i in range(len(f)):

        if f[i] == ' ':
            continue
        elif f[i] == ',':
            continue

        if f[i] == '(':
            f1.append('[')
        elif f[i] == ')':
            f1.append(']')
        elif f[i] in propozitii:
            f1.append('[')
            f1.append(f[i])
            f1.append(']')
        elif f[i] == '¬':
            f1.append(f[i])
            f1.append(',')
        elif f[i] in conectori:
            f1.append(',')
            f1.append(f[i])
            f1.append(',')

    f = ''.join(f1)
    print(f)
    return f


def inlocuire_in_propozitie(f, nr):

    prop = []
    propozitii = list(string.ascii_uppercase)

    f1 = []
    for i in range(len(f)):
        if f[i] == ' ':
            continue
        elif f[i] == ',':
            continue
        elif f[i] == '[' and f[i + 1] in propozitii and f[i + 2] == ']':
            continue
        elif f[i] == ']' and f[i - 1] in propozitii and f[i - 2] == '[':
            continue
        f1.append(f[i])

    f = f1
    for elem in f:
        if elem in propozitii and elem not in prop:
            prop.append(elem)

    f_str = ''.join(f)

    for p in prop:
        print("Interpretarea", nr + 1, "a lui", p, ':')
        f_str = f_str.replace(p, input())

    f = list(f_str)

    return f


def adev_sau_fals(a, con, b):

    if con == '¬':
        if b == 'A':
            return 'F'
        elif b == 'F':
            return 'A'

    elif con == '∧':
        if a == 'A' and b == 'A':
            return 'A'
        elif a == 'A' and b == 'F':
            return 'F'
        elif a == 'F' and b == 'A':
            return 'F'
        elif a == 'F' and b == 'F':
            return 'F'

    elif con == '∨':
        if a == 'A' and b == 'A':
            return 'A'
        elif a == 'A' and b == 'F':
            return 'A'
        elif a == 'F' and b == 'A':
            return 'A'
        elif a == 'F' and b == 'F':
            return 'F'

    elif con == '⇒':
        if a == 'A' and b == 'A':
            return 'A'
        elif a == 'A' and b == 'F':
            return 'F'
        elif a == 'F' and b == 'A':
            return 'A'
        elif a == 'F' and b == 'F':
            return 'A'

    elif con == '⇔':
        if a == 'A' and b == 'A':
            return 'A'
        elif a == 'A' and b == 'F':
            return 'F'
        elif a == 'F' and b == 'A':
            return 'F'
        elif a == 'F' and b == 'F':
            return 'A'


def interpretare(f, nr):

    propozitii = list(string.ascii_uppercase)
    conectori = ['∧', '∨', '⇒', '⇔']

    f = inlocuire_in_propozitie(f, nr)

    continua = any(i in conectori or i == '¬' for i in f)

    while continua:
        print(''.join(f))
        for i in range(1, len(f) - 1):

            if f[i - 1] in propozitii or f[i + 1] in propozitii:
                if f[i] == '¬':
                    f[i - 1:i + 3] = adev_sau_fals(f[i - 1], f[i], f[i + 1])
                    break

            if f[i - 1] in propozitii and f[i + 1] in propozitii:
                if f[i] in conectori:
                    f[i - 2:i + 3] = adev_sau_fals(f[i - 1], f[i], f[i + 1])
                    break

        continua = any(i in conectori for i in f)

    return ''.join(f)


def main():

    f = [i for i in input("Formula propozitionala: ")]

    print("Verificare sintaxa? da/nu")
    if input() == 'da':
        verificare_sintaxa(f)

    print("Constructie arbore? da/nu")
    if input() == 'da':
        f = list(constructie_arbore(f))

    print("Interpretare? da/nu")
    if input() == 'da':
        nr_interpretari = int(input("Cate interpretari? "))
        for i in range(nr_interpretari):
            print(interpretare(f, i))


main()
